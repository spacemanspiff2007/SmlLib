from binascii import a2b_hex

import pytest

from smllib.errors import InvalidBufferPos
from smllib.reader import SmlFrame, SmlStreamReader


def process_frame(frame: SmlFrame, get_obis_fails: bool = True):
    assert isinstance(frame, SmlFrame)

    # ensure that parsing always works
    for _ in range(3):
        sml_messages = frame.parse_frame()
        assert len(sml_messages) >= 3, sml_messages
        for msg in sml_messages:
            msg.format_msg()

        try:
            obis_values = frame.get_obis()
        except InvalidBufferPos:
            if not get_obis_fails:
                raise
            continue
        else:
            assert len(obis_values) >= 4, obis_values
            for obis in obis_values:
                obis.get_value()


@pytest.mark.parametrize(
    'frame', (
        pytest.param(
            b'1b1b1b1b0101010176051c414c02620062007263010176010102310b0a01445a47000282c0b07262016505471c2a620263f9380'
            b'076051d414c02620062007263070177010b0a01445a47000282c0b0070100620affff7262016505471c2a747707010060320101'
            b'0172620162006200520004445a470177070100600100ff017262016200620052000b0a01445a47000282c0b0017707010001080'
            b'0ff641c01047262016200621e520363344f0177070100020800ff017262016200621e520362000101016393770076051e414c02'
            b'6200620072630201710163e6ba00000000001b1b1b1b1a04dad0',
            id='Frame1'
        ),
        pytest.param(
            b'1b1b1b1b0101010176040000016200620072650000010176010107000002dba23c0b0a01484c5902000424a0010163945b00760'
            b'40000026200620072650000070177010b0a01484c5902000424a00101f10477070100603201010101010104484c590177070100'
            b'600100ff010101010b0a01484c5902000424a00177070100010800ff65001c81046502dba23d621e52ff6502aea132017707010'
            b'0020800ff65001c81046502dba23d621e52ff62000177070100100700ff0101621b52005300890177070100200700ff01016223'
            b'52ff6309280177070100340700ff0101622352ff6309290177070100480700ff0101622352ff63092201770701001f0700ff010'
            b'1622152fe62290177070100330700ff0101622152fe624e0177070100470700ff0101622152fe622e0177070100510701ff0101'
            b'6208520062f00177070100510702ff01016208520062780177070100510704ff010162085200630110017707010051070fff010'
            b'162085200630138017707010051071aff01016208520063011101770701000e0700ff0101622c52ff6301f40177070100000200'
            b'000101010109312e30322e3030370177070100605a02010101010105413031410177070100600500ff0101010165001c8104010'
            b'10163fc1e00760400000362006200726500000201710163e8230000001b1b1b1b1a0222ed',
            id='Frame2'
        ),
        pytest.param(
            b'1B1B1B1B01010101760501188E6162006200726500000101760101070000000000000B000000000000000000000101636877007'
            b'60501188E626200620072650000070177010B000000000000000000000172620165002EC3F47A77078181C78203FF0101010104'
            b'45425A0177070100000009FF010101010B000000000000000000000177070100010800FF6401018001621E52FB690000000A7AC'
            b'1BC170177070100010801FF0101621E52FB690000000A74B1EA770177070100010802FF0101621E52FB6900000000060FD1A001'
            b'77070100020800FF6401018001621E52FB69000000000D19E1C00177070100100700FF0101621B52FE55000089D901770701002'
            b'40700FF0101621B52FE55000020220177070100380700FF0101621B52FE5500000A9201770701004C0700FF0101621B52FE5500'
            b'005F2501010163810200760501188E636200620072650000020171016325FC000000001B1B1B1B1A0356F5',
            id='Frame Issue #8 (OK)'
        ),
        pytest.param(
            b'1B1B1B1B010101017605011FBC8362006200726500000101760101070000000000000B00000000000000000000010163F8F6007'
            b'605011FBC846200620072650000070177010B000000000000000000000172620165002FF64F7A77078181C78203FF0101010104'
            b'45425A0177070100000009FF010101010B000000000000000000000177070100010800FF6401018001621E52FB690000000AC07'
            b'048A70177070100010801FF0101621E52FB690000000ABA6077070177070100010802FF0101621E52FB6900000000060FD1A001'
            b'77070100020800FF6401018001621E52FB69000000000D19E1C00177070100100700FF0101621B52FE550001C39701770701002'
            b'40700FF0101621B52FE5500001AC60177070100380700FF0101621B52FE5500000A1401770701004C0700FF0101621B52FE5500'
            b'019EBD01010163F08A007605011FBC8562006200726500000201710163E38F000000001B1B1B1B1A0336DB',
            id='Frame Issue #8 (ERR)'
        ),
    )
)
def test_frames(frame) -> None:
    reader = SmlStreamReader()
    reader.add(a2b_hex(frame))
    process_frame(reader.get_frame())


@pytest.mark.parametrize(
    'frame', (
        #
        # This is a frame where the shortcut fails
        #
        pytest.param(
            b'1b1b1b1b010101017605077707006200620072630101760107ffffffffffff05027d02560b0a01454d4800009f3846726201650'
            b'27d082b62016312980076050777070162006200726307017707ffffffffffff0b0a01454d4800009f3846070100620affff7262'
            b'0165027d082b7577070100603201010101010104454d480177070100600100ff010101010b0a01454d4800009f3846017707010'
            b'0010800ff641c010472620165027d082b621e52ff6501ddf5f40177070100020800ff0172620165027d082b621e52ff6501d4dc'
            b'0d0177070100100700ff0101621b520053039f01010163ec0100760507770702620062007263020171016344d5001b1b1b1b1a0'
            b'08aa9',
            id='Frame Issue #15 (FIXED)'
        ),
    )
)
def test_frames_get_obis_fails(frame) -> None:
    reader = SmlStreamReader()
    reader.add(a2b_hex(frame))
    process_frame(reader.get_frame(), get_obis_fails=True)


@pytest.mark.parametrize(
    'frame', (
        pytest.param(
            b'1b1b1b1b010101017604000001620062007265000001017601010700000a5758520b0a01484c5902000159bb010163547d00760'
            b'40000026200620072650000070177010b0a01484c5902000159bb0101f10e77070100603201010101010104484c590177070100'
            b'600100ff010101010b0a01484c5902000159bb0177070100010800ff65001c0104650a575853621e52ff65066f04ab017707010'
            b'0020800ff65001c0104650a575853621e52ff65081cb4540177070100100700ff0101621b52005300bc0177070100200700ff01'
            b'01622352ff6309380177070100340700ff0101622352ff6309290177070100480700ff0101622352ff63092401770701001f070'
            b'0ff0101622152fe62450177070100330700ff0101622152fe62150177070100470700ff0101622152fe621a0177070100510701'
            b'ff01016208520062780177070100510702ff01016208520062f00177070100510704ff010162085200630146017707010051070'
            b'fff010162085200630129017707010051071aff01016208520063012801770701000e0700ff0101622c52ff6301f40177070100'
            b'010800600101621e520262290177070100010800610101621e52026301650177070100010800620101621e52026305050177070'
            b'100010800630101621e520263600d0177070100010800640101621e5202650001a5a20177070100020800600101621e52026237'
            b'0177070100020800610101621e52026301580177070100020800620101621e52026309090177070100020800630101621e52026'
            b'34aec0177070100020800640101621e520265000213a20177070100000200000101010109312e30322e3030370177070100605a'
            b'02010101010105413031410177070100600500ff0101010165001c0104010101633361007604000003620062007265000002017'
            b'10163ebf400001b1b1b1b1a017502',
            id='Frame Issue #8 (FIXED)'
        ),
    )
)
def test_frames_kermit(frame) -> None:
    reader = SmlStreamReader(crc='kermit')
    reader.add(a2b_hex(frame))
    process_frame(reader.get_frame())


@pytest.mark.parametrize(
    'data', (
        pytest.param(
            b'760505b6436862006200726301017601010501e76bce0b090149534b0004812d55010163696c00760505b643696200620072630'
            b'70177010b090149534b0004812d55070100620affff72620165028654d27a77078181c78203ff010101010449534b0177070100'
            b'000009ff010101010b090149534b0004812d550177070100010800ff650001018201621e52ff590000000003617c82017707010'
            b'0010801ff0101621e52ff590000000003617c820177070100010802ff0101621e52ff5900000000000000000177070100020800'
            b'ff0101621e52ff5900000000033b55d50177070100020801ff0101621e52ff5900000000033b55d50177070100020802ff01016'
            b'21e52ff5900000000000000000177070100100700ff0101621b520055000000c40177078181c78205ff01010101830255ee18e3'
            b'85e7aa763de1b81508f198e40e495f1ef707f779be518456b0f293674b06d0ea4060f11f2b6f6fb5d1c7ae620101016396c6007'
            b'60505b6436a6200620072630201710163fd4900',
            id='Frame1'
        ),
        pytest.param(
            b'7607000e1ef6d82a620062007263010176010107000e10e4480e0b060606060104c56c97db0101635584007607000e1ef6d82b62'
            b'0062007263070177010b060606060104c56c97db070100620affff7262016510e460887a77078181c78203ff0101010104454d48'
            b'0177070100000009ff010101010b060606060104c56c97db0177070100010800ff640101a201621e52ff56000706507d01770701'
            b'00020800ff640101a201621e52ff5600136473340177070100010801ff0101621e52ff56000706507d0177070100020801ff0101'
            b'621e52ff5600136473340177070100010802ff0101621e52ff5600000000000177070100020802ff0101621e52ff560000000000'
            b'0177070100100700ff0101621b52ff55fffff9140177078181c78205ff017262016510e46088010183026b6b6b6bb6b66b6b6b6b'
            b'09910a958432f7c76ef11e1ba5d13d047051d5b189e1263e62d73058e3f03e219b24804ecac4010101632538007607000e1ef6d8'
            b'2e62006200726302017101639eda00',
            id='Frame2'
        ),
        pytest.param(
            b'7605004bf37b620062007263010176010105001951290b0a0149534b0005020de27262016500194f586201631084007605004bf3'
            b'7c620062007263070177010b0a0149534b0005020de2070100620affff7262016500194f58757707010060320101010101010449'
            b'534b0177070100600100ff010101010b0a0149534b0005020de20177070100010800ff65001c010401621e52ff6500247bc10177'
            b'070100020800ff0101621e52ff62000177070100100700ff0101621b520053080d01010163fdc0007605004bf37d620062007263'
            b'020171016357f100',
            id='Frame3'
        ),
        pytest.param(
            b'76050550750262006200726301017601010501c57c560b0a0149534b0005020de27262016501c57c07620163c497007605055075'
            b'03620062007263070177010b0a0149534b0005020de2070100620affff7262016501c57c07757707010060320101010101010449'
            b'534b0177070100600100ff010101010b0a0149534b0005020de20177070100010800ff65001c410401621e52ff6501d3c8d80177'
            b'070100020800ff0101621e52ff650001fe010177070100100700ff0101621b52005300ad010101639e9c00760505507504620062'
            b'0072630201710163b71b00',
            id='Frame3'
        ),
    )
)
def test_frame_only(data) -> None:
    frame = SmlFrame(a2b_hex(data))
    process_frame(frame)
